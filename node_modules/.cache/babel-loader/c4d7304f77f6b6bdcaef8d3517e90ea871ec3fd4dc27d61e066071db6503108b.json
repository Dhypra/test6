{"ast":null,"code":"export default {\n  name: 'head',\n  props: ['area'],\n  data() {\n    return {\n      currentTime: '',\n      today: '',\n      shift: ''\n    };\n  },\n  methods: {\n    getNameDay() {\n      const days = ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'];\n      const months = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Augustus', 'September', 'Oktober', '-11', 'Desember'];\n      const date = new Date();\n      const hour = date.getHours();\n      const day = date.getDay();\n      const hari = date.getDate();\n      const month = date.getMonth();\n      const year = date.getFullYear();\n      const now = `${days[day]},${hari}-${month}-${year}`;\n      this.today = now;\n      this.shift = hour >= 5 || hour <= 17 ? 'Day' : 'Night';\n    },\n    getCurrentTime() {\n      const padWithZero = number => number < 10 ? '0' + number : number;\n      const now = new Date();\n      const hours = padWithZero(now.getHours());\n      const minutes = padWithZero(now.getMinutes());\n      const seconds = padWithZero(now.getSeconds());\n      this.currentTime = `${hours}:${minutes}:${seconds}`;\n    }\n  },\n  mounted() {\n    this.getCurrentTime(); // Initialize clock immediately\n    this.getNameDay(); // Initialize clock immediately\n    setInterval(this.getCurrentTime, 1000); // Update clock every second\n    setInterval(this.getNameDay, 1000); // Update clock every second\n  }\n};","map":{"version":3,"names":["name","props","data","currentTime","today","shift","methods","getNameDay","days","months","date","Date","hour","getHours","day","getDay","hari","getDate","month","getMonth","year","getFullYear","now","getCurrentTime","padWithZero","number","hours","minutes","getMinutes","seconds","getSeconds","mounted","setInterval"],"sources":["C:\\Users\\andhi\\webDev\\realtime stock\\18\\FE\\src\\components\\RTSC\\components\\RTSCHead.vue"],"sourcesContent":["<template>\n  <!-- judul -->\n  <CCard style=\"width: 99%; text-align: left; margin: 0 0 10px 0;border-radius: 15px\">\n    <CListGroup\n      style=\"background-color: #4cadab; color: white;border-radius: 15px\"\n      class=\"text-center\"\n    >\n      <div\n        style=\"\n          text-align: left;\n          font-weight: bold;\n          align-items: center;\n          font-size: 2.5rem;\n          color: #e0e0e0;\n          position: absolute;\n          top: 0;\n          left: -85px;\n        \"\n      >\n        <pre>\n        {{ today }}\n        {{ currentTime }} WIB\n        {{ shift }} Shift\n      </pre\n        >\n      </div>\n\n      <div>\n        <h1 style=\"font-size: 8rem; font-weight: 700; margin: 0\">\n          STOCK {{ area }}\n        </h1>\n      </div>\n    </CListGroup>\n  </CCard>\n</template>\n\n<script>\nexport default {\n  name: 'head',\n  props: ['area'],\n  data() {\n    return {\n      currentTime: '',\n      today: '',\n      shift: '',\n    }\n  },\n\n  methods: {\n    getNameDay() {\n      const days = [\n        'Minggu',\n        'Senin',\n        'Selasa',\n        'Rabu',\n        'Kamis',\n        'Jumat',\n        'Sabtu',\n      ]\n      const months = [\n        'Januari',\n        'Februari',\n        'Maret',\n        'April',\n        'Mei',\n        'Juni',\n        'Juli',\n        'Augustus',\n        'September',\n        'Oktober',\n        '-11',\n        'Desember',\n      ]\n      const date = new Date()\n      const hour = date.getHours()\n      const day = date.getDay()\n      const hari = date.getDate()\n      const month = date.getMonth()\n      const year = date.getFullYear()\n      const now = `${days[day]},${hari}-${month}-${year}`\n      this.today = now\n      this.shift = hour>=5||hour<=17 ? 'Day' : 'Night'\n    },\n\n    getCurrentTime() {\n      const padWithZero = (number) => (number < 10 ? '0' + number : number)\n      const now = new Date()\n      const hours = padWithZero(now.getHours())\n      const minutes = padWithZero(now.getMinutes())\n      const seconds = padWithZero(now.getSeconds())\n\n      this.currentTime = `${hours}:${minutes}:${seconds}`\n    },\n  },\n  mounted() {\n    this.getCurrentTime() // Initialize clock immediately\n    this.getNameDay() // Initialize clock immediately\n    setInterval(this.getCurrentTime, 1000) // Update clock every second\n    setInterval(this.getNameDay, 1000) // Update clock every second\n  },\n}\n</script>\n"],"mappings":"AAqCA,eAAe;EACbA,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT;EACF,CAAC;EAEDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,MAAMC,IAAG,GAAI,CACX,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,MAAM,EACN,OAAO,EACP,OAAO,EACP,OAAO,CACT;MACA,MAAMC,MAAK,GAAI,CACb,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,UAAU,EACV,WAAW,EACX,SAAS,EACT,KAAK,EACL,UAAU,CACZ;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC;MACtB,MAAMC,IAAG,GAAIF,IAAI,CAACG,QAAQ,CAAC;MAC3B,MAAMC,GAAE,GAAIJ,IAAI,CAACK,MAAM,CAAC;MACxB,MAAMC,IAAG,GAAIN,IAAI,CAACO,OAAO,CAAC;MAC1B,MAAMC,KAAI,GAAIR,IAAI,CAACS,QAAQ,CAAC;MAC5B,MAAMC,IAAG,GAAIV,IAAI,CAACW,WAAW,CAAC;MAC9B,MAAMC,GAAE,GAAI,GAAGd,IAAI,CAACM,GAAG,CAAC,IAAIE,IAAI,IAAIE,KAAK,IAAIE,IAAI,EAAC;MAClD,IAAI,CAAChB,KAAI,GAAIkB,GAAE;MACf,IAAI,CAACjB,KAAI,GAAIO,IAAI,IAAE,CAAC,IAAEA,IAAI,IAAE,EAAC,GAAI,KAAI,GAAI,OAAM;IACjD,CAAC;IAEDW,cAAcA,CAAA,EAAG;MACf,MAAMC,WAAU,GAAKC,MAAM,IAAMA,MAAK,GAAI,EAAC,GAAI,GAAE,GAAIA,MAAK,GAAIA,MAAM;MACpE,MAAMH,GAAE,GAAI,IAAIX,IAAI,CAAC;MACrB,MAAMe,KAAI,GAAIF,WAAW,CAACF,GAAG,CAACT,QAAQ,CAAC,CAAC;MACxC,MAAMc,OAAM,GAAIH,WAAW,CAACF,GAAG,CAACM,UAAU,CAAC,CAAC;MAC5C,MAAMC,OAAM,GAAIL,WAAW,CAACF,GAAG,CAACQ,UAAU,CAAC,CAAC;MAE5C,IAAI,CAAC3B,WAAU,GAAI,GAAGuB,KAAK,IAAIC,OAAO,IAAIE,OAAO,EAAC;IACpD;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACR,cAAc,CAAC,GAAE;IACtB,IAAI,CAAChB,UAAU,CAAC,GAAE;IAClByB,WAAW,CAAC,IAAI,CAACT,cAAc,EAAE,IAAI,GAAE;IACvCS,WAAW,CAAC,IAAI,CAACzB,UAAU,EAAE,IAAI,GAAE;EACrC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}